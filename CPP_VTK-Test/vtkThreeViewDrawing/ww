#include <vtkActor.h>
#include <vtkActor2D.h>
#include <vtkImageMapper.h>
#include <vtkPolyData.h>
#include <vtkPolyDataMapper.h>
#include <vtkProperty.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkRenderer.h>
#include <vtkSmartPointer.h>
#include <vtkWindowToImageFilter.h>

#include <vtkConeSource.h>
#include <vtkXMLUnstructuredGridReader.h>

int main(int, char *[]) {
  vtkSmartPointer<vtkRenderWindow> renderWindow =
      vtkSmartPointer<vtkRenderWindow>::New();

  vtkSmartPointer<vtkRenderWindowInteractor> renderWindowInteractor =
      vtkSmartPointer<vtkRenderWindowInteractor>::New();
  renderWindowInteractor->SetRenderWindow(renderWindow);

  vtkSmartPointer<vtkConeSource> coneSource =
      vtkSmartPointer<vtkConeSource>::New();
  coneSource->Update();

  // Create a mapper and actor
  vtkSmartPointer<vtkPolyDataMapper> mapper =
      vtkSmartPointer<vtkPolyDataMapper>::New();
  mapper->SetInputConnection(coneSource->GetOutputPort());
  vtkSmartPointer<vtkActor> actor = vtkSmartPointer<vtkActor>::New();
  actor->SetMapper(mapper);

  // Define viewport ranges
  //   double xmins[4] = {0, .5, 0, .5};
  //   double xmaxs[4] = {0.5, 1, 0.5, 1};
  //   double ymins[4] = {0, 0, .5, .5};
  //   double ymaxs[4] = {0.5, 0.5, 1, 1};

  double xmins[4] = {
      0,
      .75,
      .75,
      .75,
  };
  double xmaxs[4] = {.75, 1, 1, 1};
  double ymins[4] = {0, 0, .25, .5};
  double ymaxs[4] = {1, .25, .5, .75};

  vtkSmartPointer<vtkRenderer> mainRenderer =
      vtkSmartPointer<vtkRenderer>::New();
  mainRenderer->SetViewport(xmins[0], ymins[0], xmaxs[0], ymaxs[0]);
  mainRenderer->AddActor(actor);
  mainRenderer->ResetCamera();
  renderWindow->AddRenderer(mainRenderer);
  renderWindow->Render();

  for (unsigned i = 1; i < 4; i++) {
    vtkSmartPointer<vtkWindowToImageFilter> windowToImageFilter =
        vtkSmartPointer<vtkWindowToImageFilter>::New();

    windowToImageFilter->SetInput(renderWindow);
    windowToImageFilter->SetViewport(xmins[0], ymins[0], xmaxs[0], ymaxs[0]);
    // windowToImageFilter->SetScale(2);
    windowToImageFilter->SetInputBufferTypeToRGBA();
    windowToImageFilter->ReadFrontBufferOff();
    windowToImageFilter->Update();

    vtkSmartPointer<vtkImageMapper> imageMapper =
        vtkSmartPointer<vtkImageMapper>::New();
    imageMapper->SetInputConnection(windowToImageFilter->GetOutputPort());

    vtkSmartPointer<vtkActor2D> imageActor = vtkSmartPointer<vtkActor2D>::New();
    imageActor->SetMapper(imageMapper);

    vtkSmartPointer<vtkRenderer> renderer = vtkSmartPointer<vtkRenderer>::New();
    renderer->SetViewport(xmins[i], ymins[i], xmaxs[i], ymaxs[i]);
    // renderer->AddActor(actor);
    renderer->AddActor2D(imageActor);
    renderer->ResetCamera();

    renderWindow->AddRenderer(renderer);
    renderWindow->Render();
  }

  renderWindow->SetWindowName("Multiple ViewPorts");
  renderWindowInteractor->Start();

  return EXIT_SUCCESS;
}
